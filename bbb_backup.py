# -*- coding: utf-8 -*-
"""BBB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_GQPuZw-g0EQ_iQDrTdlFZJ8BBIE_7OS
"""

!pip install rdkit-pypi
!pip install matplotlib==3.5.3



import matplotlib.pyplot as plt

from rdkit import Chem
m = Chem.MolFromSmiles('CC(CC1=CC2=C(C=C1)OCO2)NC ')

from rdkit.Chem import Draw
img = Draw.MolToImage(m)
img

"""Is it the right molecule?

The beauty of RDKIT is it can quickly perform calculations about your molecule(s). Calculations include count the number of atoms in a molecule, count the molecular weight, etc. You could of course do this manually, but as you will see later, this can be exhausting for large datasets. Don't worry if you are not an expert of drugs. RDKIT is reliable enough.
"""

m.GetNumAtoms()
#gets the number of non-carbon atoms

m2 = Chem.AddHs(m)
m2.GetNumAtoms()
#includes the number of all the atoms

#calculate the entire molecular weight
from rdkit.Chem import Descriptors
Descriptors.MolWt(m)

"""Note descriptors are what the cheminformatics community calls features. As the name suggest, descriptors are descriptions of molecules. There are hundreds of these available. We will be working with 2D descriptors but there are also 3D descriptors - descriptors that provide information about a molecule's 3D structure.
Another useful feature from RDKIT is its ability to compare the similarities between molecules.
"""

from rdkit import DataStructs
from rdkit.Chem import AllChem, DataStructs, Descriptors, Draw

mol1 = Chem.MolFromSmiles('CC(=O)NC1=CC=C(C=C1)O') # Paracetamol
mol2 = Chem.MolFromSmiles('CN1C=NC2=C1C(=O)N(C(=O)N2C)C') # Caffeine
mol3 = Chem.MolFromSmiles('CN1C2=C(C(=O)N(C1=O)C)NC=N2') # Theophylline
mol4 = Chem.MolFromSmiles('CC(CC1=CC2=C(C=C1)OCO2)NC') #3,4-Methylenedioxymethamphetamine

fp1 = AllChem.GetMorganFingerprint(mol1, 4)
fp2 = AllChem.GetMorganFingerprint(mol2, 4)
fp3 = AllChem.GetMorganFingerprint(mol3, 4)
fp4 = AllChem.GetMorganFingerprint(mol4, 4)

"""AllChem.GetMorganFingerprint(): This is a function from the RDKit library that calculates a specific type of fingerprint called a Morgan fingerprint. Morgan fingerprints are a common type of circular fingerprint used in cheminformatics."""

print(DataStructs.TanimotoSimilarity(fp1, fp2)) # replace the arguments to determine which two molecules are similar
print(DataStructs.TanimotoSimilarity(fp2, fp3)) #most similar to caffeine
print(DataStructs.TanimotoSimilarity(fp3, fp1))
print(DataStructs.TanimotoSimilarity(fp4, fp1))
print(DataStructs.TanimotoSimilarity(fp4, fp2))
print(DataStructs.TanimotoSimilarity(fp4, fp3))

from rdkit.Chem.Draw import SimilarityMaps
mol = mol2 # # mol2 is already a Mol object
AllChem.ComputeGasteigerCharges(mol)
contribs = [mol.GetAtomWithIdx(i).GetDoubleProp('_GasteigerCharge') for i in range(mol.GetNumAtoms())]
fig = SimilarityMaps.GetSimilarityMapFromWeights(mol, contribs, colorMap='jet', contourLines=10)

"""Lab Task 2

For the second task, we will leverage descriptors to help us build effective ML models to predict drug biological activity. One such activity is whether a drug can cross the blood brain barrier (BBB). The BBB is a barrier that aims to prevent toxic molecules from reaching and consequently affecting our brain. It's a robust barrier and ensures our safety. However, it also prevents drugs from reaching the brain, which is a burden if you want to treat a brain-related disorder. So let's see if ML can be used to help scientists know if their drug can cross the BBB.

Your task will be to convert the SMILES notation from the dataset into 200 molecular descriptors for each drug in the dataset. Once featurised, use the molecular descriptors as inputs to predict whether a drug will cross the BBB. It should be routine by now to make sure EDA is first performed before jumping straight into ML training. If you decide to use a tree-based learner, don't forget to output the feature importance to see which molecular descriptors are key to the learner's performance.
"""

import pandas as pd
import numpy as np
from rdkit import Chem
from rdkit import DataStructs
from rdkit.Chem import AllChem
import pandas as pd
import numpy as np
import seaborn as sns
#import rdkit.Chem
from rdkit.ML.Descriptors.MoleculeDescriptors import MolecularDescriptorCalculator
from rdkit.ML.Descriptors import MoleculeDescriptors
from rdkit.Chem import Descriptors

# load excel file from directory
data_drug = pd.read_csv('BBB_datasets.csv', encoding='latin-1')

# Select the SMILES column
smiles = data_drug['SMILES']

# Create a list
mol_descriptors = []

# Loop through every drug and calculate the molecular descriptors

for i in data_drug['SMILES']:
    moler = Chem.MolFromSmiles(i)
    if True:
        try:
            calc = MoleculeDescriptors.MolecularDescriptorCalculator([x[0] for x in Descriptors._descList])
            vector = calc.CalcDescriptors(moler)
            mol_descriptors.append(vector)
        except:
            print(i)

# print list of all 200 mol descriptors
Descriptors._descList

# create an array of the 200 mol descriptors
cols_mols = np.asarray(Descriptors._descList)

desc_df = pd.DataFrame(mol_descriptors, columns = cols_mols)

#print them to test they look ok
desc_df
# Now its time to perform EDA, followed by ML training

#EDA
desc_df.describe()

desc_df.isna().sum()

desc_df.dropna(inplace=True)
#have to replace  the index
desc_df = desc_df.reset_index(drop=True)

print(desc_df.info())

# PCA

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Standardize the data
scaler = StandardScaler()
desc_df_scaled = scaler.fit_transform(desc_df)

# Perform PCA
pca = PCA(n_components=2)
desc_df_pca = pca.fit_transform(desc_df_scaled)



bbb_permeability = data_drug['BBB_permeability'][desc_df.index] # Use original data_drug index

# Create scatter plot with color-coding
plt.scatter(desc_df_pca[:, 0], desc_df_pca[:, 1], c=bbb_permeability, cmap='viridis')

plt.scatter(desc_df_pca[:, 0], desc_df_pca[:, 1], cmap=data_drug["Class"], c= ["red", "blue"])
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA of Drug Descriptors')
plt.show()

desc_df_pca

bbb_permeability = data_drug['Class'][desc_df.index] # Use original data_drug index

# Get the 'Class' column and ensure it's the same length as desc_df_pca
class_values = data_drug['Class'][desc_df.index]

# Map class values to colors
color_map = {'BBB+': 'red', 'BBB-': 'blue'} # Update with your actual class names
colors = [color_map[cls] for cls in class_values]

# Create scatter plot with color-coding
plt.figure(figsize=(10, 6))
plt.scatter(desc_df_pca[:, 0], desc_df_pca[:, 1], c=colors) # Use mapped colors
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(color_map.keys(), prop={'size':8})
plt.title('PCA of Drug Descriptors')
plt.show()

