# -*- coding: utf-8 -*-
"""BBB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_GQPuZw-g0EQ_iQDrTdlFZJ8BBIE_7OS
"""

# Note: Install these packages using pip before running the script:
# pip install rdkit-pypi
# pip install matplotlib==3.5.3
# pip install pandas numpy seaborn scikit-learn

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

from rdkit import Chem
from rdkit import DataStructs
from rdkit.Chem import AllChem, DataStructs, Descriptors, Draw
from rdkit.Chem.Draw import SimilarityMaps
from rdkit.ML.Descriptors.MoleculeDescriptors import MolecularDescriptorCalculator
from rdkit.ML.Descriptors import MoleculeDescriptors

# Basic molecular analysis
m = Chem.MolFromSmiles('CC(CC1=CC2=C(C=C1)OCO2)NC ')

img = Draw.MolToImage(m)
# img  # Uncomment to display image in Jupyter

"""Is it the right molecule?

The beauty of RDKIT is it can quickly perform calculations about your molecule(s). Calculations include count the number of atoms in a molecule, count the molecular weight, etc. You could of course do this manually, but as you will see later, this can be exhausting for large datasets. Don't worry if you are not an expert of drugs. RDKIT is reliable enough.
"""

print("Number of atoms (without H):", m.GetNumAtoms())
#gets the number of non-carbon atoms

m2 = Chem.AddHs(m)
print("Number of atoms (with H):", m2.GetNumAtoms())
#includes the number of all the atoms

#calculate the entire molecular weight
print("Molecular weight:", Descriptors.MolWt(m))

"""Note descriptors are what the cheminformatics community calls features. As the name suggest, descriptors are descriptions of molecules. There are hundreds of these available. We will be working with 2D descriptors but there are also 3D descriptors - descriptors that provide information about a molecule's 3D structure.
Another useful feature from RDKIT is its ability to compare the similarities between molecules.
"""

mol1 = Chem.MolFromSmiles('CC(=O)NC1=CC=C(C=C1)O') # Paracetamol
mol2 = Chem.MolFromSmiles('CN1C=NC2=C1C(=O)N(C(=O)N2C)C') # Caffeine
mol3 = Chem.MolFromSmiles('CN1C2=C(C(=O)N(C1=O)C)NC=N2') # Theophylline
mol4 = Chem.MolFromSmiles('CC(CC1=CC2=C(C=C1)OCO2)NC') #3,4-Methylenedioxymethamphetamine

fp1 = AllChem.GetMorganFingerprint(mol1, 4)
fp2 = AllChem.GetMorganFingerprint(mol2, 4)
fp3 = AllChem.GetMorganFingerprint(mol3, 4)
fp4 = AllChem.GetMorganFingerprint(mol4, 4)

"""AllChem.GetMorganFingerprint(): This is a function from the RDKit library that calculates a specific type of fingerprint called a Morgan fingerprint. Morgan fingerprints are a common type of circular fingerprint used in cheminformatics."""

print("Similarity between Paracetamol and Caffeine:", DataStructs.TanimotoSimilarity(fp1, fp2))
print("Similarity between Caffeine and Theophylline:", DataStructs.TanimotoSimilarity(fp2, fp3))
print("Similarity between Theophylline and Paracetamol:", DataStructs.TanimotoSimilarity(fp3, fp1))
print("Similarity between MDMA and Paracetamol:", DataStructs.TanimotoSimilarity(fp4, fp1))
print("Similarity between MDMA and Caffeine:", DataStructs.TanimotoSimilarity(fp4, fp2))
print("Similarity between MDMA and Theophylline:", DataStructs.TanimotoSimilarity(fp4, fp3))

# Similarity maps
mol = mol2 # mol2 is already a Mol object
AllChem.ComputeGasteigerCharges(mol)
contribs = [mol.GetAtomWithIdx(i).GetDoubleProp('_GasteigerCharge') for i in range(mol.GetNumAtoms())]
fig = SimilarityMaps.GetSimilarityMapFromWeights(mol, contribs, colorMap='jet', contourLines=10)

"""Lab Task 2

For the second task, we will leverage descriptors to help us build effective ML models to predict drug biological activity. One such activity is whether a drug can cross the blood brain barrier (BBB). The BBB is a barrier that aims to prevent toxic molecules from reaching and consequently affecting our brain. It's a robust barrier and ensures our safety. However, it also prevents drugs from reaching the brain, which is a burden if you want to treat a brain-related disorder. So let's see if ML can be used to help scientists know if their drug can cross the BBB.

Your task will be to convert the SMILES notation from the dataset into 200 molecular descriptors for each drug in the dataset. Once featurised, use the molecular descriptors as inputs to predict whether a drug will cross the BBB. It should be routine by now to make sure EDA is first performed before jumping straight into ML training. If you decide to use a tree-based learner, don't forget to output the feature importance to see which molecular descriptors are key to the learner's performance.
"""

# Load the dataset
try:
    data_drug = pd.read_csv('../data/BBB_datasets.csv', encoding='latin-1')
    print("Dataset loaded successfully")
    print("Dataset shape:", data_drug.shape)
    print("Columns:", data_drug.columns.tolist())
except FileNotFoundError:
    print("Error: BBB_datasets.csv file not found. Please ensure the file is in the data/ directory.")
    exit(1)

# Select the SMILES column
smiles = data_drug['SMILES']

# Create a list for molecular descriptors
mol_descriptors = []

# Loop through every drug and calculate the molecular descriptors
print("Calculating molecular descriptors...")
for i, smile in enumerate(data_drug['SMILES']):
    moler = Chem.MolFromSmiles(smile)
    if moler is not None:
        try:
            calc = MoleculeDescriptors.MolecularDescriptorCalculator([x[0] for x in Descriptors._descList])
            vector = calc.CalcDescriptors(moler)
            mol_descriptors.append(vector)
        except Exception as e:
            print(f"Error processing SMILES {i}: {smile}, Error: {e}")
    else:
        print(f"Invalid SMILES at index {i}: {smile}")

print(f"Successfully processed {len(mol_descriptors)} molecules")

# Create an array of the molecular descriptors
cols_mols = [x[0] for x in Descriptors._descList]

desc_df = pd.DataFrame(mol_descriptors, columns=cols_mols)

print("Descriptor DataFrame shape:", desc_df.shape)
print("First few rows:")
print(desc_df.head())

# EDA
print("\n=== Exploratory Data Analysis ===")
print("Basic statistics:")
print(desc_df.describe())

print("\nMissing values:")
missing_values = desc_df.isna().sum()
print(missing_values[missing_values > 0])

# Remove rows with missing values
desc_df.dropna(inplace=True)
desc_df = desc_df.reset_index(drop=True)

print(f"\nDataFrame info after cleaning:")
print(desc_df.info())

# PCA
print("\n=== Principal Component Analysis ===")

# Standardize the data
scaler = StandardScaler()
desc_df_scaled = scaler.fit_transform(desc_df)

# Perform PCA
pca = PCA(n_components=2)
desc_df_pca = pca.fit_transform(desc_df_scaled)

print(f"Explained variance ratio: {pca.explained_variance_ratio_}")

# Get the corresponding class labels for the cleaned data
class_values = data_drug['Class'].iloc[desc_df.index]

# Map class values to colors
color_map = {'BBB+': 'red', 'BBB-': 'blue'}
colors = [color_map.get(cls, 'gray') for cls in class_values]

# Create scatter plot with color-coding
plt.figure(figsize=(10, 6))
scatter = plt.scatter(desc_df_pca[:, 0], desc_df_pca[:, 1], c=colors, alpha=0.7)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA of Drug Descriptors')

# Create legend
from matplotlib.patches import Patch
legend_elements = [Patch(facecolor=color, label=label) for label, color in color_map.items()]
plt.legend(handles=legend_elements, title='BBB Permeability')

plt.tight_layout()
plt.show()

print("Script completed successfully!")
